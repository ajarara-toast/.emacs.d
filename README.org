#+STARTIP: overview
* What is this?
This file is an org mode file that emacs can use to generate configuration.

Almost all of the code blocks you see below are placed into init.el. This has two benefits: I don't have to comment this code with semicolons, and I can easily navigate to what code I'd like to edit or add. Here's a picture of my config as I see it:

[[http://i.imgur.com/yQPukq6.png]]

Further, I won't be going over what each package does, (the README files do a better job then I could do), but I will be going over configuration details.
* Init
** Enable debugging
This allows us to immediately detect if something went wrong with loading the init file. At the end of this init, this is toggled off.
#+BEGIN_SRC emacs-lisp :tangle init.el
(toggle-debug-on-error)
#+END_SRC

* Package archive config
#+BEGIN_SRC emacs-lisp :tangle init.el
;; package-archive config
(require 'package)
(package-initialize)

(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

(setq package-enable-at-startup nil)
#+END_SRC

* Quelpa bootstrap
"Quelpa" is like a personal melpa that doesn't automatically build from whatever the author feels like pushing to their repo. It is a little more involved then just using package.el, with the benefit that you can manage the source yourself, with the ability to choose branches, easily patch things (looking into whether this is better then borg is for pushing back upstream)
#+BEGIN_SRC emacs-lisp :tangle init.el
;; Quelpa bootstrap
  (package-initialize)
  (if (require 'quelpa nil t)
      (quelpa-self-upgrade)
    (with-temp-buffer
      (url-insert-file-contents "https://raw.github.com/quelpa/quelpa/master/bootstrap.el")
      (eval-buffer)))
#+END_SRC

* Use-package bootstrap
Use package is a way to tidy up config and a convenient way to lazy load packages (that is, defer loading so that emacs doesn't load everything on startup. johnw tags a release every six months or so, so let's use quelpa's stable declaration until we need cutting edge functionality.
#+BEGIN_SRC emacs-lisp :tangle init.el
;; Use-package bootstrap
(quelpa 'use-package :stable t)
;; is this really necessary? imenu allows me to instead manage this file through the headings anyway.
(setq use-package-enable-imenu-support t)

;; bind-key is provided with use-package, diminish I only use once or twice
(eval-when-compile
  (require 'use-package))
(require 'diminish)
(require 'bind-key)
#+END_SRC

* UI
** Font
I tried the default font (DejaVu Sans Mono, use M-x describe-font to find out what yours is), source code pro, and a couple others the emacs subreddit recommended, but all I need is a monospace font that looks nice and doesn't crap out on <= 80 characters. Terminus is that font.

Uh, gohu works too.
#+BEGIN_SRC emacs-lisp :tangle init.el
;; this didn't seem to work, would not have the first frame be terminus'd
;; (set-face-attribute 'default nil :font "-xos4-Terminus-normal-normal-normal-*-16-*-*-*-c-80-iso10646-1")
;; this worked!
(add-to-list 'default-frame-alist '(font . "-xos4-Terminus-normal-normal-normal-*-16-*-*-*-c-80-iso10646-1"))
#+END_SRC

** Disabling 'helpful' visual goodies
The only useful thing I lose here is the menubar, but typing <F10> gives you one at your cursor. And now I get all this real estate (it's free!)
#+BEGIN_SRC emacs-lisp :tangle init.el
;; Disabling 'helpful' visual goodies
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
(blink-cursor-mode 0)
#+END_SRC

** Enabling 'helpful' visual goodies
Some people consider it a hindrance, but I rarely need more then 80 columns while programming and would rather not have to deal with horizontal scrolling. These two settings are neat for prose, and org mode.
#+BEGIN_SRC emacs-lisp :tangle init.el
;; enabling visual line mode
(visual-line-mode 1)

(toggle-word-wrap)
#+END_SRC

I don't know how I feel using hl-line-mode on EVERY buffer. Instead, let's just add the ones that make sense.
#+BEGIN_SRC emacs-lisp :tangle init.el
(defvar my-hl-line-mode-hook-list
  `(prog-mode-hook
    circe-mode-hook))

(dolist (this-mode-hook my-hl-line-mode-hook-list)
  (add-hook this-mode-hook `hl-line-mode))
#+END_SRC

* Interface
** Fixing title bar
I use this hack shell script called focus. It cycles through windows based on the contents of the title bar. Super useful. But emacs has the unfortunate behavior of breaking my script if there is more then one frame. So keep it consistent.
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq frame-title-format (concat "%b" " " invocation-name "@" (system-name)))
#+END_SRC

** Making emacs snappier
any dialog that asks for confirmation requires that you type in the full yes or no (and ignores whatever is after it, but does not accept y/n. And you don't have to hit RET.

Echoing keystrokes allows you to see exactly what you've typed almost immediately. Doesn't sound useful, but it is appreciated often.

the third assignment tells emacs to paste at point, not on location of click. Now if C-y doesn't work, I can use my mouse without caring about precision.

and consolidate any interaction to minibuffers. These two options were brought to me, again, by [[https://github.com/wasamasa/dotemacs/blob/master/init.org][wasamasa's config]]
#+BEGIN_SRC emacs-lisp :tangle init.el
;; Making emacs snappier
(fset `yes-or-no-p `y-or-n-p)
(setq echo-keystrokes 0.1)
(setq mouse-yank-at-point t)
#+END_SRC

* dired
Assuming you're reading this linearly, I haven't mentioned that I use evil-mode. Evil-mode is an implementation of vim's editing model in elisp. It's very complete, and very awesome. dired-mode-map redefines some things that I need very often.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package dired
    :config
    (define-key dired-mode-map (kbd "SPC") nil)
    (define-key dired-mode-map (kbd "M-s") nil)
    
    ;; remove dired-mode-map definition
    (define-key dired-mode-map (kbd "i") nil)
    
    (general-define-key :prefix nil
                        :keymaps 'dired-mode-map
                        :states '(normal)
                        "i" 'evil-insert-state)
                        
    (general-define-key :prefix nil
                        :keymaps 'dired-mode-map
                        :states '(emacs)
                        "i" 'dired-maybe-insert-subdir)

  )
#+END_SRC

* swiper/ivy
man do I love this package. Lightweight, pretty, and FAST. Enabling ivy mode globally gives most aspects of the minibuffer fuzzy typeahead (like ido-mode) but it further allows you to keep your search session if needed (especially useful when looking in help variables). Swiper is used to search buffers, and uses ivy as a backend. It is possible to use helm as a backend instead.
#+BEGIN_SRC emacs-lisp :tangle init.el
  (quelpa '(swiper :repo "abo-abo/swiper" :fetcher github)) ; installs both swiper and ivy
  (use-package ivy
    :demand t
    :diminish ivy-mode
    :config
    (setq ivy-ignore-buffers `("\\` "))
    
    ;; i like completion in the minibuffer, completion in region is obnoxious when you have hl-line-mode active. This must be set before ivy-mode is called.
    (setcdr (assoc 'ivy-completion-in-region ivy-display-functions-alist) nil)

    (ivy-mode t))

  (use-package swiper
    :config

    ;; almost required, I use search a lot for navigation, especially in
    ;;   this growing init file. Note that if multiple candidates are in a
    ;;   view moving between them does not recenter the buffer.
    (setq swiper-action-recenter t)

    ;; shadows isearch
    :bind* (("C-s" . swiper))
    )

#+END_SRC

* ace-window
C-x o is way too much to switch between windows (which is an operation I find myself doing near constantly). The "Ρ" you see below isn't actually a "Potato" P, it's a capital letter greek rho. Check out [[http://oremacs.com/2015/02/14/semi-xmodmap/][semimap]] for details.

#+BEGIN_SRC emacs-lisp :tangle init.el
(quelpa 'ace-window)
(use-package ace-window
  :bind*
  ;; shadows quoted-insert
  (("C-q" . ace-window)
   ;; needs abo-abo's key config (search for "semimap")
   ;; U03A1
   ("Ρ" . ace-window))
  :config
  (setq aw-scope 'frame)
  )
#+END_SRC

* magit
Tarsius is a god. I have no idea where my use-package declaration went, though.
#+BEGIN_SRC emacs-lisp :tangle init.el
(quelpa 'magit)
(use-package magit
  :config
(setq magit-popup-use-prefix-argument 'default))
#+END_SRC

* evil-mode
Yeah, sorry. Maybe if I fixed my keyboard so that I had meta on semicolon without having to muck about with xcape (my previous config) I would consider using just emacs keybinds (C-a C-k is awesome) But the way I have it set up right now means that I never have to deal with an abrupt context switch. Sometimes.

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package evil
#+END_SRC

evil likes to override my C-z key with evil-toggle-state. But if I set this before I load evil, it no longer gets overridden.
#+BEGIN_SRC emacs-lisp :tangle init.el

 :init
  (setq evil-toggle-key "C-`")
#+END_SRC

evil's undo is a little strong, especially since I'm staying in insert ("emacs", later explained) mode more often.
#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq evil-want-fine-undo t)
#+END_SRC

[[https://github.com/noctuid/general.el][General]] is a package that aims to simplify and unify keybinding. Problems I have with letting bind-key handle it is that it's difficult to tailor. An example: in dired mode, I like having the ability to move by jk or having visual block/line selection. At the same time, I want dired mode bindings available. So I bind "i" to evil-insert-state.  However I have no idea how to do it with bind-key. Further, this allows me to get rid of evil-leader. The less packages I depend on for my output, the better.

I might consider moving this out to its own section.
#+BEGIN_SRC emacs-lisp :tangle init.el
    (quelpa 'general)
    (use-package general
      :config

      ;; leader key binds
      (setq general-default-keymaps '(evil-normal-state-map
                                      evil-visual-state-map))

      (setq general-default-prefix "SPC")
      (general-define-key
                          
       "g" 'keyboard-quit
       "C-g" 'keyboard-quit
       "SPC" 'ace-window

       "w" 'save-buffer
       "v" 'visual-line-mode
       "t" 'toggle-word-wrap
       "s" 'magit-status
       
       "a" 'org-agenda-list
       
       "m" 'fill-region

       "f" 'find-file
       "p" 'my-find-projects
       "o" 'my-find-org-files

       "r" 'org-capture

       "i" 'imenu

      
       ) ;; closes general-define-key block


      
    ) ;; closes use-package general block
#+END_SRC

Turn evil mode on globally
#+BEGIN_SRC emacs-lisp :tangle init.el
  :config
  (evil-mode t)
#+END_SRC

the below is used to have emacs be the default state, but allow me to drop in (go up?) to evil if need be.
more config is available in the URL contained within the progn

there are significantly less context switches now. when I am in a new buffer, I know I am in emacs state, and can begin typing immediately. If I want to do anything evil, just hit esc to elevate to normal state.
#+BEGIN_SRC emacs-lisp :tangle init.el
  (progn
    (defalias 'evil-insert-state 'evil-emacs-state) ; http://stackoverflow.com/a/27794225/2932728
    (setq evil-default-state 'emacs)
    ;; https://bitbucket.org/bastibe/.emacs.d/src/12d08ec90a6445787b028fa8640844a67182e96d/init.el?at=master&fileviewer=file-view-default
    (define-key evil-emacs-state-map [escape] 'evil-normal-state)
    )
  ;; I didn't put the above define-key into the bind just because it makes more sense here. If I encounter a remapping of esc, I'd probably move it into bind*

  ;; IDK about motion state, it blocks useful keys, like ? or h. (which I get to by typing "\" in normal mode)
#+END_SRC

a quick way to differentiate which state I'm in without looking at the mode line, may change this later.
#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq evil-emacs-state-cursor `(hbar . 2))
#+END_SRC

inserts highly visible characters at marks. they go away upon entering visual mode or 'insert' mode.
#+BEGIN_SRC emacs-lisp :tangle init.el
  (quelpa 'evil-visual-mark-mode)
  (use-package evil-visual-mark-mode
    :config
    (evil-visual-mark-mode))
#+END_SRC

Once you start binding keys, use-package will lazy-load the packages, that is, wait until you hit a key that is in the bind before loading.
While a useful feature, in this case I want evil-mode on start asap.
#+BEGIN_SRC emacs-lisp :tangle init.el
  :demand t
#+END_SRC


Even though I use emacs-state as my insert state, I still want certain things to be available all the time, no matter what state I'm in.

#+BEGIN_SRC emacs-lisp :tangle init.el
  :bind* (:map evil-emacs-state-map
               ("C-r" . evil-paste-from-register)

               :map evil-normal-state-map
               ("C-f" . evil-scroll-down)
               ("C-b" . evil-scroll-up)
               ("j" . evil-next-visual-line)
               ("k" . evil-previous-visual-line)
               ("'" . evil-goto-mark)
               ("C-e" . end-of-line)
               ("C-y" . yank)
               ("C-d" . evil-scroll-down)

               :map evil-motion-state-map
               ("C-f" . evil-scroll-down)
               ("C-b" . evil-scroll-up))
) ;; closes use-package evil block
#+END_SRC

* org mode
Ah, org mode. Lovingly described as the crack of emacs, the thing that I absolutely couldn't live without (at least that's what my package manager tells me).

#+BEGIN_SRC emacs-lisp :tangle init.el
;; init or config? I never know.
(use-package org
  :init
  (setq org-directory "~/Documents/org/")

  (setq org-default-notes-file (concat org-directory "notes.org"))
#+END_SRC

I'm using the org-export-to-html feature for sharing (eventually I'll output to jekyll)
#+BEGIN_SRC emacs-lisp :tangle init.el
  (quelpa 'htmlize)
#+END_SRC

org-capture is fantastic. if you're anything like me you have ideas that come and go like the wind. this allows you to easily capture those ideas without worrying about where to save them, whether or not context is necessary, the directory structure. It's a massively beefed up remember buffer. If you want something that just works without any previous configuration, then try '''M-x remember''', the file will be saved in your .emacs.d directory, and it's called notes.

when you invoke org-capture interactively, a buffer pops up that waits for you to enter in a key. this key takes you to a special buffer that you can format beforehand with a template variable (customized below). this then saves it to the file you specify.

I do recommend saving all of these to a common place, that way you can define a key to go to where all of these are saved and look at them fully

a quick primer: this is a listing, where each element is itself a list that follows this format:
#+BEGIN_SRC emacs-lisp
  ("a" ; key to be pressed, does not have to have to be just one key
       ; but there are some special rules if you want to use two (or rms forbid, 3)

   "astrology" ; whatever you want the capture template to be called in the popup buffer. keep it short, but I don't think there's a low limit on these.

   plain ; the type of entry you want, unquoted. check out the link below, it offers a concise listing of these if you need more.

   (file ; this argument is a list, itself. get used to lists within lists within lists. the one I use the most is file+datetree, which files all my notes in a clear ... uh... datetree format. for more details, look below.

    "baz.org")) ; this will be concatenated (probably not if you use an absolute path, check out expand-file-name)
#+END_SRC

and that's it! for more info, check out [[http://orgmode.org/manual/Template-elements.html#Template-elements][the org mode manual for templates!]]

Don't fret about the red lettering, the text as you see it here is correct.

#+BEGIN_SRC emacs-lisp :tangle init.el
   (setq my-org-capture-directory "~/Documents/org/capture/")
   (setq org-capture-templates
         '(("t" "Todo" entry (file+headline "~/Documents/org/gtd-capture.org" "Tasks")
            "* TODO %?\n  %i\n  %a")
           ("j" "Journal" entry (file+datetree "~/Documents/org/journal.org")
            "* %?\nEntered on %U\n  %i\n  %a")
           ("e" "Emacs" entry (file+datetree "~/Documents/org/emacs.org")
            "* %?\nEntered on %U\n  %i\n  %a")
           ("k" "KOL" entry (file+datetree "~/Documents/org/kol.org")
            "* %?\nEntered on %U\n %a")
           ("a" "ascension" entry (file+datetree "~/Documents/org/kol-ascension.org")
            "* %?\nEntered on %U\n %a")
           ("r" "track" entry (file+datetree "~/Documents/org/track.org")
            "* %?\nEntered on %U\n")
           ("d" "dose" entry (file+datetree "~/Documents/org/dose.org")
            "* %?\nEntered on %U\n")
           ("g" "grievances" entry (file+datetree "~/Documents/org/grievances.org")
            "* %?\nEntered on %U\n %i")
           ("p" "programming-lang" entry (file+datetree "~/Documents/org/pl.org")
            "* %?\nEntered on %U\n  %i")
           ("m" "music" entry (file+datetree "~/Documents/org/music.org")
            "* %?\nEntered on %U\n %i")
           ("u" "uncategorized-mess" entry (file+datetree "~/Documents/org/u-mess.org")
            "* %?\nEntered on %U\n")
           )
         )
#+END_SRC

Here we hold most of our gtd configuration, following [[http://orgmode.org/worg/org-tutorials/orgtutorial_dto.html][this post]]. This means org-agenda... other stuff.
#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq org-agenda-files (list "~/Documents/org/gtd-capture.org"
                               ))
#+END_SRC

We're still in the use package declaration. Close it off, and throw in an easy bind in case we can't get to it any other way.
#+BEGIN_SRC emacs-lisp :tangle init.el
   :bind*
   (("<f5>" . org-capture))
   )
#+END_SRC

* term
I'm not exactly happy with term. There's a bunch of workarounds and keys get rebound and still I encounter usability issues. But it works enough, and I have good clipboard (and visual selection) interaction. So it stays. Maybe someone with knowledge of how to do things the right way will get a real terminal working by embedding or linking to the binary.

I use term instead of ansi-term (tried it in a previous iteration) because it's much clearer to configure. I still have no idea how to make ansi-term not insert line breaks.
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package term 
  ;; ugh, I need a good terminal emulator. I only use an emacs term over real ones because I get to use evil (or emacs keys, if you're that kinda guy)
  :config
  ;; most of this config is from:
  ;; http://echosa.github.io/blog/2012/06/06/improving-ansi-term/

  ;; don't modify my output please
  (setq term-suppress-hard-newline t)

  ;; kill the buffer after finishing.
  (defadvice term-sentinel (around my-advice-term-sentinel (proc msg))
    (if (memq (process-status proc) '(signal exit))
        (let ((buffer (process-buffer proc)))
          ad-do-it
          (kill-buffer buffer))
      ad-do-it))
  (ad-activate 'term-sentinel)

  ;; don't ask me about whether I want to use bash. I do.
  ;; modified from ansi-term to term from source post
  (defvar my-term-shell "/bin/bash")
  (defadvice term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'term)

  ;; why is this not the default?
  (defun my-term-use-utf8 ()
    (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
  (add-hook 'term-exec-hook 'my-term-use-utf8)

  (add-hook 'term-mode-hook 'goto-address-mode)

  :bind*
  (("C-z" . term)
   :map term-raw-map
   ("C-y" . term-paste)
   )
  :bind-keymap*
  (("C-x" . ctl-x-map))
)
#+END_SRC

* which-key
which-key is fantastic. It provides a visual reminder for any keymap. It even has a dialog for showing the top level binds (I bind it here to C-h SPC)

#+BEGIN_SRC emacs-lisp :tangle init.el
(quelpa 'which-key)
(use-package which-key
  :demand t
  :diminish which-key-mode
  :bind* 
  (("C-h SPC" . which-key-show-top-level))
  :config
  (which-key-mode))
#+END_SRC

* helm
I only use it for M-x invocations (in case I forget keybinds). Counsel-M-x does this as well.
#+BEGIN_SRC emacs-lisp :tangle init.el
(quelpa 'helm)
(use-package helm
  :init
  ;; helm sets this stuff off, and they're not gonna fix it: https://github.com/emacs-helm/helm/issues/1498#issue-154021209
  (setq ad-redefinition-action 'accept)
  :ensure t
  :bind* (("M-x" . helm-M-x)))
#+END_SRC

* elpy
It was a little difficult figuring out how to change tests programmatically, so if you want to use something else, first M-x elpy-set-test-runner , and then query elpy-test-runner. For py.test, I had to use the symbol elpy-test-pytest-runner.
#+BEGIN_SRC emacs-lisp :tangle init.el
(quelpa 'elpy)
(use-package elpy
  :config

  ;; py.test is actively developed. 
  (elpy-set-test-runner `elpy-test-pytest-runner)

  ;; silences completion warning. found on ob-python's issue pages, strangely enough.
  (setq python-shell-completion-native-enable nil) 

  ;; convenience
  (defalias 'workon 'pyvenv-workon)
  
  ;; preference
  (setq elpy-rpc-backend "jedi")
  (setq elpy-rpc-python-command "python3")
  (setq python-shell-interpreter "python3")
  
  ;; start
  (elpy-enable))
#+END_SRC

* AucTeX
** Installation and configuration

#+BEGIN_SRC emacs-lisp :tangle init.el
;; todo: have this package installed from quelpa. for now, use use-package's ensure logic.
(message "instead we're loading in shivs for the assignment. committing this is a sin.")

(defun my-tmp-garbage ()
  (interactive)
  (call-process-shell-command
 "$(cd ~/doc/college/ma534/hw3 && pdflatex submit.tex)"
 nil "*Shell Command Output*" t
 )
  (message "compiled submit.pdf"))


#+END_SRC

* ess-mode
Used for homework. Provides convenient commands to build and view changes to LateX files, but is designed for use with R.
#+BEGIN_SRC emacs-lisp :tangle init.el
  (quelpa 'ess)
  (use-package ess)
#+END_SRC

* pdf tools
#+BEGIN_SRC emacs-lisp :tangle init.el
(quelpa 'pdf-tools)
(use-package pdf-tools)
#+END_SRC

* Slime
I've done all my swank config using ql, so all I gotta do is point it here.
#+BEGIN_SRC emacs-lisp :tangle init.el
(quelpa 'slime)
(use-package slime
  :config
  (slime-setup)
  (setq inferior-lisp-program "/usr/bin/sbcl"))
#+END_SRC

* circe

Circe is described as an intermediary between erc and rcirc. It features pretty good default options (with one exception that's really not all that necessary), and default network configuration out of the box. It's written by jorgenschaefer, who also is one of the leads on elpy!
#+BEGIN_SRC emacs-lisp :tangle init.el
(quelpa 'circe)
(use-package circe
#+END_SRC

I use ZNC to connect to my networks. So far, I only really fool around in #emacs, and some other dev-related channels. But this means I don't really care about circe's default channels, so I clear it here.
#+BEGIN_SRC emacs-lisp :tangle init.el
  :config
  (setq circe-network-defaults nil)
#+END_SRC

It's very simple to configure circe to connect to ZNC (a personal irc server, essentially, that optionally saves the last 50 lines of chats so you have context upon logging in, amongst a whole slew of other features).
#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq circe-network-options
        '(("ZNC/freenode"
           :tls t
           :host "jarmac.org"
           :port 6697
           :user "alphor/freenode"
           ;; the param is needed otherwise error!
           ;; read from minibuffer doesn't use named arguments, but has 7 of them.
           :pass (lambda (server-name) (read-passwd "Password?: ")))
           ("ZNC/mozilla"
            :tls t
            :host "jarmac.org"
            :port 6697
            :user "alphor/mozilla"
            :pass (lambda (server-name) (read-passwd "Password?: ")))
           ))
#+END_SRC

I have no idea why colored nicks are not enabled by default. Much prettier! (This is the default option I was complaining about earlier)
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; enable nicks
  (enable-circe-color-nicks)
#+END_SRC

Unfortunately, swiper calls font-lock-ensure-function which has the annoying habit of washing out all the color. I add a function to circe's mode hook that sets font-lock-ensure to the ignore function. 
#+BEGIN_SRC emacs-lisp :tangle init.el
  (add-hook 'circe-mode-hook 'my-font-lock-ensure-function-nilify)
#+END_SRC

It's rare that I need to update this list, but it's sometimes necessary.
#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq circe-fool-list
        '("^7heo"
          "Alkjosair"
          "RETAS"
          "Gedalchieel"
          "Aethonnon"
          "Gratiutus"
          "farmr"
          "abellitis"
          "WYNEDDLYN"
          "heathobaas"
          "ENSEOU"
          "_SuChOr_"
          "_Polynicne_"
          "_friggne_79"
          "Nout"
          "pistiLlI"
          "GlYnDyM"
          "Eirinne"
          "Posturiius"
          "Aninoik"
          "Querso"
          "Snotrhar"
          "HYGESTAS"
          "ADASSIAS"
          "PoSTor"
          "Cassiofa"
          "Artamononko"
          "_ToSzEwSkKi_22"
          "Eurydictle"
          "akimovtok"
          "ekkrlsi005"
          "Brongar"
          ))
#+END_SRC

Unfortunately spammers have hit hard recently, cluttering my mode line. I like having the ability to see activity but at the same time I need my mode line. One thing I'd like to have is the ability to see only mentions. Everything else can wait. (This still allows queries to get through)
#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq tracking-ignored-buffers '(("#emacsr" circe-highlight-nick-face)
                                   ("#" circe-highlight-nick-face)))

#+END_SRC

At the same time, I'd like tracking if I've talked. Someone's thought of that before and kindly put it in [[https://github.com/jorgenschaefer/circe/wiki/Configuration#auto-track-ignored-channels-on-talk][the docs]].

Unfortunately doesn't work quite well with such a lax regex, it'll require you to set up the channels you want to track before hand. Ah well, I'll leave it here for... reasons, and try fixing it later.
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; (defadvice circe-command-SAY (after jjf-circe-unignore-target)
  ;;   (let ((ignored (tracking-ignored-p (current-buffer) nil)))
  ;;     (when ignored
  ;;       (setq tracking-ignored-buffers
  ;;             (remove ignored tracking-ignored-buffers))
  ;;       (message "This buffer will now be tracked."))))
  ;; (ad-activate 'circe-command-SAY)
#+END_SRC
don't bombard me with leaves if the leaver hasn't spoke in a while.
#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq circe-reduce-lurker-spam t)
)
#+END_SRC

These definitions interface with znc's *controlpanel module. Rather then inline them here, I plan on releasing this if it ever gets to a usable state, so it's in another file, soon to be posted on github.
#+BEGIN_SRC emacs-lisp :tangle init.el
(quelpa '(circe-actions :fetcher github :repo "alphor/circe-actions"))
(use-package circe-actions)
#+END_SRC

Don't mind this.
#+BEGIN_SRC 
(setq erc-server-auto-reconnect nil)
#+END_SRC

* Have emacs use tcp
I used to have this. Eventually, I wanted the ability to run emacs on a server (whether it be VPS, VM, or docker instance), but according to the [[http://stackoverflow.com/questions/12546722/using-emacs-server-and-emacsclient-on-other-machines-as-other-users][discussion found here]], it seems difficult. Would've been really neat to have a guile install emacs and a regular emacs side by side (although it is very likely still possible using sockets). 
* persistent bookmarks
registers are neat. let's try using them more often. If I bother creating a register, I want it to be persistent. Emacs calls persistent registers bookmarks, and to save them, you must either call `bookmark-save or configure it to save after x amount of bookmarks created
#+BEGIN_SRC emacs-lisp :tangle init.el
;; persistent bookmarks
(setq bookmark-save-flag 1) ; so save after every bookmark made.
#+END_SRC

* simple scrolling
Initially I just used the package (named simple-scrolling), but found that it caused weird graphical issues with browsing manual pages. This works just fine, although sometimes I miss the ability to have margins, but I also don't miss the jumpiness that sometimes occurred.
#+BEGIN_SRC emacs-lisp :tangle init.el
;; simple scrolling
(progn
  (setq scroll-conservatively 10000)
  (setq auto-window-vscroll nil)
  )
#+END_SRC

* expand-region
I don't use this enough, but that's mostly because I don't manipulate xml a lot (where this shines imo)
#+BEGIN_SRC emacs-lisp :tangle init.el
(quelpa 'expand-region)
(use-package expand-region
  :bind (("M-t" . er/expand-region))
  )
#+END_SRC

* Directory clutter
From [[https://github.com/wasamasa/dotemacs/blob/master/init.org][wasamasa's config]] 

control, emacs.d/backup and emacs.d/autosave

#+BEGIN_SRC emacs-lisp :tangle init.el
;; Directory clutter
(setq backup-directory-alist '((".*" . "~/.emacs.d/backup")))
(setq version-control t)
(setq delete-old-versions t)

(setq auto-save-list-file-prefix "~/.emacs.d/autosave/")
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/autosave/" t)))
#+END_SRC

* Prefer "horizontal" splits when the frame has the space for it.
By horizontal I mean vim's (and the rest of the world's) notion of vertical. You split along the horizontal axis, I guess. Sure.

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq split-height-threshold nil)
;; tried 150, I'm using xfwm4 if that makes any difference, but it did not work.
(setq split-width-threshold 140)
#+END_SRC

* QOL fixes
To be honest I have no idea what this does, but I know that it causes emacs to hang on exit. Setting it to nil disables it, and there's no apparent loss of functionality of my clipboard interaction with emacs.. so... :|
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq x-select-enable-clipboard-manager nil)
#+END_SRC

I reject your reality and substitute my own.
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq custom-file "/dev/null")
#+END_SRC

* Theme
I like Monokai. In case I ever need to use a default theme, I'd use misterioso.
#+BEGIN_SRC emacs-lisp :tangle init.el
;; (load-theme 'misterioso t)
(quelpa `monokai-theme)
(use-package monokai-theme
  :config
  (setq monokai-comments "chocolate")
  (load-theme `monokai t))
#+END_SRC

* Unconfigured/barely used
Not much to say about these, but hell I have you here so you're gonna have to read some more rambling.

Try is useful for not having to edit a config file, installing packages that you're sure you don't even wanna bother configuring. Zamansky showcases it in one of his teaching emacs videos by grabbing lorem-ipsum, a package that does exactly what you think it does, and is a package that I don't really think I'd need to install more then 3 or 4 times in my life.
#+BEGIN_SRC emacs-lisp :tangle init.el
(quelpa 'try)
(use-package try)
#+END_SRC

Playing around with john wiegley's ledger mode
#+BEGIN_SRC emacs-lisp :tangle init.el
  (quelpa 'ledger-mode)
  (use-package ledger-mode
    :config
    (autoload 'ledger-mode "ledger-mode" "A major mode for Ledger" t)
    (add-to-list 'auto-mode-alist '("\\.ledger$" . ledger-mode)))
    
#+END_SRC

Seeing what the buzz is about.
#+BEGIN_SRC emacs-lisp :tangle init.el
  (quelpa 'projectile)
  (use-package projectile)
#+END_SRC

* "my-" functions
Most of these are definitely not my code or my ideas. But they've definitely made a difference.

C-a C-k is again, the one emacs combo that I really like. But C-a pretends like whitespace isn't a thing. Found on the emacswiki:
#+BEGIN_SRC emacs-lisp :tangle init.el
;; something useful from the emacs wiki? No way.
(defun my-smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))
  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

;; remap C-a to `smarter-move-beginning-of-line'
(global-set-key [remap move-beginning-of-line]
                'my-smarter-move-beginning-of-line)
#+END_SRC

This is primarily for killing help buffers without deleting the frame. I would replace this with shackle, but this works for now.
#+BEGIN_SRC emacs-lisp :tangle init.el
(defun my-kill-other-window ()
  (interactive)
  (if (= (count-windows) 2)
      (progn
        (other-window 1)
        (kill-buffer)
        (other-window 1))
    (error "This only works when there are two buffers!")))

#+END_SRC

in case something decides not to respect my "horizontal" preference.
#+BEGIN_SRC emacs-lisp :tangle init.el

;; not mine, found off of emacs-wiki. quickly switches orientation of two buffers.
(defun my-toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
             (next-win-buffer (window-buffer (next-window)))
             (this-win-edges (window-edges (selected-window)))
             (next-win-edges (window-edges (next-window)))
             (this-win-2nd (not (and (<= (car this-win-edges)
                                         (car next-win-edges))
                                     (<= (cadr this-win-edges)
                                         (cadr next-win-edges)))))
             (splitter
              (if (= (car this-win-edges)
                     (car (window-edges (next-window))))
                  'split-window-horizontally
                'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
          (funcall splitter)
          (if this-win-2nd (other-window 1))
          (set-window-buffer (selected-window) this-win-buffer)
          (set-window-buffer (next-window) next-win-buffer)
          (select-window first-win)
          (if this-win-2nd (other-window 1))))))

#+END_SRC

invaluable for quick edits. 
#+BEGIN_SRC emacs-lisp :tangle init.el

(defun my-find-init-file ()
  "Displays the contents of ~/.emacs.d/myinit.org, if already shown, revert to previous buffer"
  (interactive)
  (let ((init-file-location "/home/ajarara/.emacs.d/README.org"))
    (if (string= init-file-location (buffer-file-name))
        (previous-buffer)
      (find-file init-file-location)))
  )

#+END_SRC

90% of what I play around with is in this folder, so I can easily select one of these folders to quickly start an editing session.
#+BEGIN_SRC emacs-lisp :tangle init.el
(defun my-find-projects ()
  "navigates to ~/Documents/projects"
  (interactive)
  (find-file "~/Documents/projects/"))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
(defun my-find-org-files ()
  "navigates to ~/Documents/org"
  (interactive)
  (find-file "~/Documents/org/"))
#+END_SRC

Sometimes font-lock-ensure-function is called (whenever you invoke swiper). Sometimes I want to disable it. There is likely a better way to do this, but this works for now. To use this, simply call it in any hook, and you get to keep your colors and fonts!
#+BEGIN_SRC emacs-lisp :tangle init.el
(defun my-font-lock-ensure-function-nilify ()
  (setq-local font-lock-ensure-function
        'ignore))
#+END_SRC

Useful quick links.
#+BEGIN_SRC emacs-lisp :tangle init.el
  (defun my-github (query)
    (interactive "sSearch Github: ")
    (browse-url (format "https://github.com/search?q=%s" query)))

  ;; non obtrusive version of helm-google-suggest. Although helm-google-suggest is more fun
  (defun my-google (query)
    "It's mine! MIIIIIIINE!"
    (interactive "sSearch the googs: ")
    (browse-url (format "https://google.com/#q=%s" query)))
#+END_SRC

* Binds (that don't belong to specific packages)

Abo-abo's had quite the influence on my config.

using semicolon as a modifier (see abo-abo's semimap post) is a little weird at first, but works quite well. I used to use it as meta, and then xcape to insert an actual semicolon, but if I ever used vim/evil's extended command mode it was so annoying. This solution works well, but I want to emulate certain things I missed.

#+BEGIN_SRC emacs-lisp :tangle init.el
;; if there are two letters commented after the definition, the second is reached by using shift AND mode shift. It's a lot, so don't expect there to be many
;; movement
(define-key key-translation-map "ν" (kbd "M-f")) ;; [f]
(define-key key-translation-map "β" (kbd "M-b")) ;; [b]

;; shortcuts
(define-key key-translation-map "Ι" (kbd "M-i")) ;; [i]
(define-key key-translation-map "Σ" (kbd "M-z")) ;; [z]
(define-key key-translation-map "χ" (kbd "M-c")) ;; [c]

;; window manipulation
(define-key key-translation-map "ψ" (kbd "M-r")) ;; [r]
(define-key key-translation-map "κ" (kbd "M-k")) ;; [k]
#+END_SRC

The emacs help system is absolutely fantastic. Unfortunately, in some cases, (looking at you, term-mode), it gets unbound. This keeps C-h bound to help.
#+BEGIN_SRC emacs-lisp :tangle init.el
(bind-key* "C-h" `help-command)
(bind-key* "C-h C-h" (lambda ()
    (interactive) (info "(emacs) Help Summary")))
#+END_SRC

Y'know, there are astonishingly a lot of times where I'd like to quoted insert.
#+BEGIN_SRC emacs-lisp :tangle init.el
(bind-key* "M-q" `quoted-insert)
#+END_SRC
These are largely personal preference so not going to explain them.
#+BEGIN_SRC emacs-lisp :tangle init.el
;; shadows universal arg, I think? Damn, I need to read the manual.
(bind-key* "C-0" `text-scale-adjust)

;; shadows capitalize word (used to be my minor mode keymap, I moved all that to evil-leader, which I may eventually move to general)
(bind-key "M-c" `comment-dwim)

;; shadows indent-new-comment-line
(bind-key* "M-j" `end-of-buffer)

;; shadows move-to-window-line-top-bottom
(bind-key* "M-r" `delete-other-windows)

;; would like this instead to just kill the buffer, or like rotate. I think I need some buffer management tool
;; shadows kill-ring-save
(bind-key* "M-w" `delete-window)

;; I don't actually know what the name of the function is, but I know I don't need it. It's some typeface stuff.
;; also, the function name here is misleading, it evaluates the whole top-level expression, from anywhere in the expression, not just defuns
;; shadows Set face:
(bind-key* "M-o" `eval-defun)

;; I'm gonna need shackle just for this async.
;; shadows universal argument, 7
(bind-key* "M-7" `async-shell-command)

;; shadows universal argument, 1
(bind-key* "M-1" `shell-command)

;; shadows prefix containing occur
(bind-key* "M-s" 'switch-to-buffer)

;; shadows tab-to-tab-stop
(bind-key* "M-i" `my-find-init-file)

;; instantly kills buffer (without deleting the window), unless unsaved content. this advices kill-buffer
;; shadows kill-sentence
(bind-key* "M-z" `kill-this-buffer)

;; U for undeaaaaaaaaaaaaaaaaad
;; shadows upcase-word
(bind-key* "M-u" `bury-buffer)

;; shadows nothing that I know of.
;; (bind-key* "M-p" `my-find-projects)

;; this leaves M-d free, for something. Although I use mode-d for colon/semicolon
;; shadows kill-sentence
(bind-key* "M-k" `kill-word)

;; shadows nothing
(bind-key* "M-\"" `insert-pair)
#+END_SRC

* Hooks
org-mode hooks. Maybe these should go into package specific configuration. Meh.
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-hook `org-mode-hook `org-indent-mode)
(add-hook `org-mode-hook `visual-line-mode)
#+END_SRC

apropos-mode hooks. Why does apropos not bind apropos-follow to anything easy?
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-hook 'apropos-mode-hook (lambda () (local-set-key (kbd "C-c f") 'apropos-follow)))

#+END_SRC

ess-mode hooks
#+BEGIN_SRC emacs-lisp :tangle init.el
;; the <- shortcut is not helpful when you can't use hyphens in variable names

(add-hook 'ess-mode-hook (lambda () (local-set-key (kbd "_" 'self-insert-command)))) 

#+END_SRC
* Goodbye
Okay, we're done. Let's switch off debugging and send an OK.
*** Disable debugging
#+BEGIN_SRC emacs-lisp :tangle init.el
;; disable debugging
(toggle-debug-on-error)
#+END_SRC

*** Message "loaded successfully"
#+BEGIN_SRC emacs-lisp :tangle init.el
(message "Emacs config successfully loaded!")
#+END_SRC

